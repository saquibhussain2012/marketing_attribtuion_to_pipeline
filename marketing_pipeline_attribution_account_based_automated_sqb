/***********************************************************************************************
*  Open Source B2B Marketing Attribution Model for Salesforce Pipeline [SQL]
*
*  Overview & Objectives:
*  ----------------------
*  This account-based attribution model is designed to assess and attribute the impact of various marketing 
*  campaigns on lead generation and subsequent sales opportunities within Salesforce data. Lot of components annonymized for coneptual framework. This code needs revisions, edits, adjustments, as per each organizational system and needs before it can be used.
*  Specifically, it:
*    - Scores leads based on campaign attributes and priority levels.
*    - Computes a rolling score for each account over a 90-day window.
*    - Many parts of the code uses thresholds and cutoff parameters. Those are there to be refined and updated by the marketing analytics team as they find necessary based on their analysis and rationale for correct thresholds. 
*    - Identifies the most relevant campaigns for each account on any given day.
*    - Links scored leads to related sales opportunities and ranks them based on their closeness 
*      in time to the lead creation dates.
*
*  Minimum Data Requirements:
*  --------------------------
*  To run this model, you will need access to the following Salesforce data stored in your SQL 
*  Server database:
*
*  1. **Marketing/Lead Data:**
*     - **Table Name:** [lead_id_campaign_name_test]
*     - **Required Fields:**
*         - [Lead_Created_Date__c]: Date when the lead was created.
*         - [Campaign_Name]: Name of the marketing campaign.
*         - [Priority]: Priority level of the lead (e.g., 'Priority 1', 'Priority 2', etc.). Other systems may have pre-build leasd scoring logic to stamp this field. 
*         - [Account_ID]: Identifier linking the lead to a specific account.
*         - [Email], [Country_Name__c], [Job_Title]: Additional lead details (optional but useful).
*
*  2. **Sales/Opportunity Data:**
*     - **Table Name:** [Opportunity]
*     - **Required Fields:**
*         - [Id]: Unique identifier for the opportunity.
*         - [Name]: Opportunity name.
*         - [CreatedDate]: Date when the opportunity was created.
*         - [Annual_Contract_Value__c]: Financial metric associated with the opportunity.
*         - [AccountId]: Identifier to join the opportunity with the marketing data.
*         - [Type_of_Sale__c]: Type of sale (e.g., 'New', 'Upsell', 'Add-On', 'New Business').
*
*  Rationale & Benefits:
*  ---------------------
*  Marketing teams and sales organizations need to understand the effectiveness of their campaigns 
*  and the quality of the leads they generate. This model provides a systematic way to:
*    - Quantify lead quality and campaign performance with a points-based system at an account-level.
*    - Establish a temporal relationship between marketing efforts and sales opportunities.
*    - Identify which campaigns are driving the most impactful opportunities over a rolling 90-day 
*      window, thereby offering insights for better resource allocation and campaign strategy.
*    - Support data-driven decision making by linking marketing actions to revenue-generating sales.
*
*  This model is open source and designed to be modular. Each section (or CTE) is clearly commented 
*  and can be independently modified or extended to accommodate additional business rules or 
*  different data schemas.
*
*  License: MIT Open Source License 
*  Author:  Saquib Hussain (Written / developed from scratch / Dec 2024)
***********************************************************************************************/

;WITH date_series AS (
    ---------------------------------------------------------------------------------------------
    -- Date Series CTE:
    --  Generates a list of distinct dates from the lead created date field (converted to DATE)
    --  and includes the current date. This serves as the timeline for scoring and analysis.
    ---------------------------------------------------------------------------------------------
    SELECT DISTINCT 
        CAST(CONVERT(DATETIME, [Lead_Created_Date__c], 101) AS DATE) AS date
    FROM [Marketing_Silver_Gateway].[dbo].[lead_id_campaign_name_test]
    
    UNION ALL
    
    SELECT CAST(GETDATE() AS DATE)  -- Ensure current date is also included

), scored_leads AS (
    ---------------------------------------------------------------------------------------------
    -- Scored Leads CTE:
    --  Selects lead details and assigns point values based on business rules.
    --  Point rules:
    --    - 'Priority 1': 10 points
    --    - Campaign names containing 'abm' (case-insensitive): 8 points
    --    - Campaign names containing 'event' (case-insensitive): 7 points
    --    - 'Priority 2': 6 points
    --    - 'Priority 3': 2 points
    --    - Else: 0 points
    --
    --  Also converts the lead created date to a DATE type for consistency.
    ---------------------------------------------------------------------------------------------
    SELECT
        [Lead_Id],
        [Lead_Created_Date__c],
        [Priority],
        [Campaign_Name],
        [Email],
        [Country_Name__c],
        [Job_Title],
        [Account_ID] AS account_id,
        CAST(CONVERT(DATETIME, [Lead_Created_Date__c], 101) AS DATE) AS created_date,
        CASE
            WHEN [Priority] = 'Priority 1' THEN 10
            WHEN LOWER([Campaign_Name]) LIKE '%abm%' THEN 8        -- Case-insensitive match for ABM
            WHEN LOWER([Campaign_Name]) LIKE '%event%' THEN 7       -- Case-insensitive match for Event
            WHEN [Priority] = 'Priority 2' THEN 6
            WHEN [Priority] = 'Priority 3' THEN 2
            ELSE 0
        END AS points
    FROM [Marketing_Silver_Gateway].[dbo].[lead_id_campaign_name_test]
    WHERE [Account_ID] IS NOT NULL  -- Only include leads with an Account ID

), rolling_scores AS (
    ---------------------------------------------------------------------------------------------
    -- Rolling Scores CTE:
    --  For each date in our series and for each account, calculate the total points from 
    --  scored_leads over a rolling window of 90 days ending on the date.
    ---------------------------------------------------------------------------------------------
    SELECT
        ds.date,
        sl.account_id,
        SUM(sl.points) AS total_points
    FROM date_series ds
    LEFT JOIN scored_leads sl
        ON sl.created_date BETWEEN DATEADD(DAY, -90, ds.date) AND ds.date
    GROUP BY ds.date, sl.account_id

), closest_campaigns AS (
    ---------------------------------------------------------------------------------------------
    -- Closest Campaigns CTE:
    --  For each account and date, identify the most relevant campaigns based on several criteria:
    --    1. Prioritize ABM campaigns with 'Priority 1' or 'Priority 2'.
    --    2. Order by the lead priority (with Priority 1 being highest).
    --    3. De-prioritize EMAIL campaigns if they are not Priority 1.
    --    4. Use the absolute difference (in days) between the lead created date and the scoring date.
    --
    --  ROW_NUMBER is used to rank campaigns based on the above criteria.
    ---------------------------------------------------------------------------------------------
    SELECT
        sl.account_id,
        ds.date,
        sl.Campaign_Name,
        sl.Priority,
        sl.Lead_Created_Date__c,
        sl.points,
        ROW_NUMBER() OVER (
            PARTITION BY sl.account_id, ds.date
            ORDER BY
                -- Prioritize ABM campaigns with Priority 1 or 2
                CASE 
                    WHEN LOWER(sl.Campaign_Name) LIKE '%abm%' AND sl.Priority IN ('Priority 1', 'Priority 2') THEN 0
                    ELSE 1
                END ASC,
                -- Then, prioritize Priority 1 leads
                sl.Priority ASC,
                -- De-prioritize EMAIL-based campaigns if not Priority 1
                CASE 
                    WHEN LOWER(sl.Campaign_Name) LIKE '%email%' AND sl.Priority <> 'Priority 1' THEN 1
                    ELSE 0
                END ASC,
                -- Finally, choose the lead closest in time to the scoring date
                ABS(DATEDIFF(DAY, sl.Lead_Created_Date__c, ds.date)) ASC
        ) AS campaign_rank
    FROM date_series ds
    INNER JOIN scored_leads sl
        ON sl.created_date BETWEEN DATEADD(DAY, -90, ds.date) AND ds.date

), top_two_campaigns AS (
    ---------------------------------------------------------------------------------------------
    -- Top Two Campaigns CTE:
    --  Filters the campaigns from closest_campaigns to only include the top two ranked campaigns
    --  per account and date. You may adjust these thresholds based on your data and analysis.
    ---------------------------------------------------------------------------------------------
    SELECT
        account_id,
        date,
        Campaign_Name AS campaign_name,
        Priority AS campaign_priority,
        Lead_Created_Date__c AS campaign_lead_date,
        campaign_rank
    FROM closest_campaigns
    WHERE campaign_rank <= 2

), final_scores AS (
    ---------------------------------------------------------------------------------------------
    -- Final Scores CTE:
    --  Aggregates the rolling scores with campaign information.
    --  Flags an account as having reached a threshold if the total points are >= 7. You may adjust these thresholds based on your data and analysis.
    --  Also pivots the top two campaigns into separate columns.
    ---------------------------------------------------------------------------------------------
    SELECT
        rs.account_id,
        rs.date,
        rs.total_points,
        CASE
            WHEN rs.total_points >= 7 THEN 'Y'
            ELSE 'N'
        END AS threshold_reached,
        MAX(CASE WHEN tc.campaign_rank = 1 THEN tc.campaign_name END) AS Campaign_1,
        MAX(CASE WHEN tc.campaign_rank = 2 THEN tc.campaign_name END) AS Campaign_2
    FROM rolling_scores rs
    LEFT JOIN top_two_campaigns tc
        ON rs.account_id = tc.account_id AND rs.date = tc.date
    GROUP BY rs.account_id, rs.date, rs.total_points

), linked_opportunities AS (
    ---------------------------------------------------------------------------------------------
    -- Linked Opportunities CTE:
    --  Joins the final scores with opportunities based on the account and a matching time window
    --  of 90 days prior to the scoring date. Only opportunities linked to accounts that have
    --  reached the threshold (total points >= 7) and of certain sale types are included.
    ---------------------------------------------------------------------------------------------
    SELECT
        fs.account_id,
        fs.date AS account_date,
        o.[Id] AS opportunity_id,
        o.[Name] AS opportunity_name,
        o.[CreatedDate] AS opportunity_created_date,
        o.[Annual_Contract_Value__c],
        ABS(DATEDIFF(DAY, o.[CreatedDate], fs.date)) AS date_diff,
        fs.total_points,
        fs.threshold_reached,
        fs.Campaign_1,
        fs.Campaign_2
    FROM final_scores fs
    INNER JOIN [Marketing_Silver_Gateway].[dbo].[Opportunity] o
        ON fs.account_id = o.AccountId
        AND o.CreatedDate BETWEEN DATEADD(DAY, -90, fs.date) AND fs.date
        AND fs.threshold_reached = 'Y'
        AND o.Type_of_Sale__c IN ('New', 'Upsell', 'Add-On', 'New Business')

), ranked_opportunities AS (
    ---------------------------------------------------------------------------------------------
    -- Ranked Opportunities CTE:
    --  For each opportunity linked to an account, rank the opportunities by the absolute difference
    --  in days between the opportunity creation date and the scoring date (the smaller the difference,
    --  the better the rank).
    ---------------------------------------------------------------------------------------------
    SELECT
        lo.account_id,
        lo.account_date,
        lo.opportunity_id,
        lo.opportunity_name,
        lo.opportunity_created_date,
        lo.Annual_Contract_Value__c,
        lo.date_diff,
        ROW_NUMBER() OVER (
            PARTITION BY lo.account_id, lo.opportunity_id
            ORDER BY lo.date_diff ASC
        ) AS rank_within_account,
        lo.Campaign_1,
        lo.Campaign_2
    FROM linked_opportunities lo

), final_output AS (
    ---------------------------------------------------------------------------------------------
    -- Final Output CTE:
    --  Filters the ranked opportunities to only output the top-ranked (rank = 1) opportunity per account.
    ---------------------------------------------------------------------------------------------
    SELECT *
    FROM ranked_opportunities
    WHERE rank_within_account = 1

)
---------------------------------------------------------------------------------------------
-- Final SELECT:
--  Retrieves the final output, filtering by opportunity created dates. Adjust the date range as needed.
---------------------------------------------------------------------------------------------
SELECT *
FROM final_output fo
WHERE fo.opportunity_created_date BETWEEN '2023-10-23' AND '2024-11-24';
